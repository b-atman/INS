----------------SEARCH.JS-------------------
import { useState } from "react";
const Search = () => {
 const [place, setPlace] = useState("") 
return (
 <>
 <form class="form-inline"
action={`/${place}`} method="post">
 <label for="email">Place :</label> 
<input type="text" id="email"
placeholder="Enter place you want to search" name="email"
onChange={(e) => { setPlace(e.target.value) }} />
 <button type="submit" onClick={() => { }}
>Submit</button>
 </form>
 </>
 )
}
export default Search;

--------------------PLACE.JS------------------
import styles from '@/styles/Home.module.css';
import { GoogleMap, Marker, MarkerF, InfoWindowF } from
'@react-google-maps/api';
import { useMemo, useState, useEffect } from 'react';
import { useRouter } from "next/router";
export default function Home() {
 const [loaded, setLoaded] = useState(false);
 return <Map />
}
function Map() {
 const [markers, setMarkers] = 
useState([]); const router = useRouter(); 
console.log(router.query.place) const
center = useMemo(() => ({ lat: 
19.08692944881007, lng: 
72.91307924477924,
 }), []);
 useEffect(() => { 
const url =
`https://api.mapbox.com/geocoding/v5/mapbox.places/${rout
er.query.place}.json?country=in&limit=10&proximity=72.913 
07924477924%2C19.08692944881007&language=en&access_token=
${process.env.NEXT_PUBLIC_MAPBOX_API_KEY}`;
 fetch(url)
 .then(response => response.json())
 .then(data => { 
console.log(data)
 const markers = data.features.map(place
=> ({
 position: { 
lat:
place.geometry.coordinates[1], 
lng:
place.geometry.coordinates[0],
 },
title: place.place_name,
 }));
 setMarkers(markers);
 });
 console.log(markers)
 }, [center, router.query.place]);
 const [activeMarker, setActiveMarker] = 
useState(null);
 const markerIcon = {
 url: 'https://iconlibrary.com/images/markericon/marker-icon-12.jpg',
 scaledSize: typeof window !== 'undefined' ? new
window.google.maps.Size(50, 50) : null,
 };
 return (
 <>
 <GoogleMap 
zoom={14}
 mapContainerClassName='map-container' 
center={center}
 >
 {markers.map((marker, index) => (
 <Marker 
key={index}
 position={marker.position}
title={marker.title}
 onMouseOver={() =>
setActiveMarker(marker)}
 />
 ))}
 <MarkerF position={center}
text="MyLocation" icon={markerIcon} />
 </GoogleMap>
 {activeMarker && ( 
<InfoWindowF
 position={activeMarker.position} 
onCloseClick={() => setActiveMarker(null)}
 >
 <div>{activeMarker.title}</div>
 </InfoWindowF>
 )}
 </>
 )
}